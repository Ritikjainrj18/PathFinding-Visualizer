{"ast":null,"code":"// Implementing dijkstra algorithm.\n// Dijkstra is a weighted algorithm,weights are non-negative in this algorithm.\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, endNode) {\n  const visitedNodesInOrder = []; // To animate visited nodes in order to animate the process of searching.\n\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // Here isWall is the property of the node.\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode); // Checking for the success condition.\n\n    if (closestNode === endNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n} // Sorts the unvisitedNodes every time it is called.\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n} // Sets the neighbour nodes distance and also the previous node property.\n\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    if (neighbor.distance > node.distance + neighbor.weight + 1) {\n      neighbor.distance = node.distance + neighbor.weight + 1; // Now the neighbor distance is not infinity and because of it it will show among the top in unvisited nodes.\n\n      neighbor.previousNode = node; // With this property we can backtrack and find the shortest path between the start and end node.\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node; //col and row are properties of the node.\n\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited); // filtering the visited node\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"names":["dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","weight","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift"],"sources":["/home/ritik/Desktop/Dev/projects/path_finding/src/algorithms/dijkstra.js"],"sourcesContent":["// Implementing dijkstra algorithm.\n// Dijkstra is a weighted algorithm,weights are non-negative in this algorithm.\n\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid, startNode, endNode) {\n    const visitedNodesInOrder = []; // To animate visited nodes in order to animate the process of searching.\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n  \n    while (unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n  \n      // If we encounter a wall, we skip it.\n      if (closestNode.isWall) continue; // Here isWall is the property of the node.\n  \n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n  \n      visitedNodesInOrder.push(closestNode);\n  \n      // Checking for the success condition.\n      if (closestNode === endNode) return visitedNodesInOrder;\n  \n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  \n  // Sorts the unvisitedNodes every time it is called.\n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  // Sets the neighbour nodes distance and also the previous node property.\n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      if (neighbor.distance > node.distance + neighbor.weight + 1) {\n        neighbor.distance = node.distance + neighbor.weight + 1;\n        \n        // Now the neighbor distance is not infinity and because of it it will show among the top in unvisited nodes.\n        neighbor.previousNode = node; // With this property we can backtrack and find the shortest path between the start and end node.\n      }\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node; //col and row are properties of the node.\n  \n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  \n    return neighbors.filter((neighbor) => !neighbor.isVisited); // filtering the visited node\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}